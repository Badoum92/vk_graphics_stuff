#include "global.glsl"
#include "raytrace.glsl"

#extension GL_EXT_debug_printf : enable

struct VoxelMaterial
{
    vec4 albedo;
    vec4 emissive;
};

struct HitInfo
{
    vec3 pos;
    vec3 normal;
    uint voxel;
};

const uint MAX_BOUNCES = 5;

layout(set = 1, binding = 0, rgba8) uniform image2D output_image;
layout(set = 1, binding = 1, rgba8) uniform image2D output_image_acc;
layout(set = 1, binding = 2, r8ui) uniform uimage3D voxels;
layout(set = 1, binding = 3) buffer VoxelMaterials
{
    VoxelMaterial materials[];
};

uint init_rng(int x, int y, uint frame_nb)
{
    return uint(uint(x) * uint(1973) + uint(y) * uint(9277) + uint(frame_nb) * uint(26699)) | uint(1);
}

uint wang_hash(inout uint seed)
{
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}

float random_float_01(inout uint seed)
{
    return float(wang_hash(seed)) / 4294967296.0;
}

vec3 random_unit_vector(inout uint seed)
{
    float z = random_float_01(seed) * 2.0f - 1.0f;
    float a = random_float_01(seed) * TWO_PI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

void compute_normal(inout HitInfo hit_info, int last_step, ivec3 dir_step, vec3 bmin, vec3 bmax)
{
    hit_info.normal = vec3(0);
    if (last_step != -1)
    {
        hit_info.normal[last_step] = -dir_step[last_step];
        return;
    }

    for (uint i = 0; i < 3; ++i)
    {
        if (float_eq(hit_info.pos[i], bmin[i]))
        {
            hit_info.normal[i] = -1;
            break;
        }
        else if (float_eq(hit_info.pos[i], bmax[i]))
        {
            hit_info.normal[i] = 1;
            break;
        }
    }
}

void voxel_traversal(Ray ray, vec3 bmin, vec3 bmax, vec3 voxel_size, inout HitInfo hit_info)
{
    hit_info.voxel = 0;
    float tmin_ray = 0;
    float tmax_ray = 0;
    const bool ray_intersects_grid = ray_box_intersection(ray, bmin, bmax, tmin_ray, tmax_ray);
    if (!ray_intersects_grid)
    {
        return;
    }

    vec3 ray_start = clamp(ray.origin + ray.dir * tmin_ray, bmin, bmax);
    vec3 ray_end = clamp(ray.origin + ray.dir * tmax_ray, bmin, bmax);

    ivec3 cur_index = ivec3(max(vec3(0), floor(ray_start - bmin / voxel_size)));
    const ivec3 end_index = ivec3(max(vec3(0), floor(ray_end - bmin / voxel_size)));
    ivec3 dir_step = ivec3(0);
    vec3 tmax = vec3(tmax_ray);
    vec3 tdelta;
    for (uint i = 0; i < 3; ++i)
    {
        bool positive_dir = ray.dir[i] > 0.0f;
        int add_index = positive_dir ? 1 : 0;
        tmax[i] = ((cur_index[i] + add_index) * voxel_size[i] - ray_start[i]) * ray.inv_dir[i];
        dir_step[i] = positive_dir ? 1 : -1;
        tdelta[i] = voxel_size[i] * ray.inv_dir[i] * dir_step[i];
    }

    int last_step = -1;
    float last_tmax = 0;
    do
    {
        hit_info.voxel = imageLoad(voxels, cur_index).r;
        if (hit_info.voxel != 0)
        {
            hit_info.pos = ray_start + ray.dir * last_tmax;
            compute_normal(hit_info, last_step, dir_step, bmin, bmax);
            return;
        }

        if (tmax.x < tmax.y && tmax.x < tmax.z && cur_index.x != end_index.x)
        {
            last_step = 0;
            last_tmax = tmax.x;
            cur_index.x += dir_step.x;
            tmax.x += tdelta.x;
        }
        else if (tmax.y < tmax.z && cur_index.y != end_index.y)
        {
            last_step = 1;
            last_tmax = tmax.y;
            cur_index.y += dir_step.y;
            tmax.y += tdelta.y;
        }
        else if (cur_index.z != end_index.z)
        {
            last_step = 2;
            last_tmax = tmax.z;
            cur_index.z += dir_step.z;
            tmax.z += tdelta.z;
        }
        else
        {
            break;
        }
    } while (true);
}

vec4 get_ray_color(Ray ray, inout uint seed)
{
    vec4 ret = vec4(0.0f, 0.0f, 0.0f, 1.0f);
    vec4 throughput = vec4(1.0f, 1.0f, 1.0f, 1.0f);

    for (uint bounce = 0; bounce <= MAX_BOUNCES; ++bounce)
    {
        HitInfo hit_info;
        voxel_traversal(ray, vec3(0), imageSize(voxels), vec3(1), hit_info);

        if (hit_info.voxel == 0)
        {
            // float t = 0.5f * (ray.dir.y + 1.0f);
            // vec4 miss_color = (1.0f - t) * vec4(1) + t * vec4(0.4f, 0.6f, 0.9f, 1.0f);
            // ret += miss_color * throughput;
            ret += vec4(0.0, 0.0, 0.002, 1.0) * throughput;
            break;
        }

        ray.origin = hit_info.pos + hit_info.normal * EPSILON;
        ray.dir = normalize(hit_info.normal + random_unit_vector(seed));
        ray.inv_dir = 1.0f / ray.dir;

        VoxelMaterial material = materials[hit_info.voxel];
        ret += material.emissive * throughput;
        throughput *= material.albedo;

        /* ret = material.albedo;
        break; */
        /* ret = vec4(hit_info.normal, 1);
        for (uint i = 0; i < 3; ++i)
        {
            if (ret[i] < 0)
            {
                ret[i] = 0.01f;
            }
        }
        break; */
        /* ret = vec4(hit_info.pos / imageSize(voxels), 1);
        break; */
    }
    return ret;
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    const ivec2 output_size = imageSize(output_image);

    if (any(greaterThan(pixel, output_size)))
    {
        return;
    }

    uint seed = init_rng(pixel.x, pixel.y, global.frame_number);
    const vec2 jitter = vec2(random_float_01(seed), random_float_01(seed)) - 0.5f;
    const vec2 uv = (vec2(pixel) + jitter) / vec2(output_size);

    vec4 target = vec4(uv * 2.0f - 1.0f, 0.1f, 1.0f);
    target = global.inv_view * global.inv_proj * target;
    target /= target.w;

    Ray ray;
    ray.origin = global.camera_pos.xyz;
    ray.dir = normalize(target.xyz - ray.origin);
    ray.inv_dir = 1.0f / ray.dir;

    vec4 color = get_ray_color(ray, seed);
    vec4 color_acc = imageLoad(output_image_acc, pixel);

    color = mix(color_acc, color, 1.0f / float(global.frame_number + 1));
    color = clamp(color, vec4(0, 0, 0, 1), vec4(1, 1, 1, 1));

    imageStore(output_image, pixel, color);
    imageStore(output_image_acc, pixel, color);
}
